/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Telas;

import ConecBD.ConexaoBanco;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
 

/**
 * Tabela genérica de uso geral
 * @author Juliano Felipe
 */
public class MultipleTable extends javax.swing.JDialog {
    public CadastroServicos telaanterior;
    public CadastroFinancas anteriorFinancas;
    public MultipleTable parafechar;
    int what_close;
    
    int num_rs=0; //Número de resultados retornados pelo executeQuery, em qualuqer lugar que seja
    int SelectedId=-1; //RowId referente ao selecionado na lista
    String nomeCliente=""; //Nome do cliente associado ao servico (só gerado se aberto pelo cadastro de serviços
    boolean flag=false; //Flag para determinar se os "gets" estão "prontos"
    String title=null;
    int length_row; //Num. of columns on the jTable
    Object [] rows;
    
    /**
     * Creates new form MultipleTable
     */
    public MultipleTable() {
        setModal(true); //Deve ser modal para que o programa "espere a seleção na lista".
        initComponents();
        initNoicon();
                
        //Seta janela para o meio da tela, independente da resolução.
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
    }

    /**
     * 07/02/16 - Juliano Felipe Seta icone 1*1px (para "remover" icone default)
     */
    private void initNoicon() {
        Image No_ico = new BufferedImage(1, 1, BufferedImage.TYPE_INT_ARGB_PRE);
        this.setIconImage(No_ico);
        title = this.getTitle(); //Pega título do frame
    }
    
    /**
     * 07/02/16 - Juliano Felipe 
     * Construtor para ser executado quando chamado do método de serviços
     * @param telanterior Instância de tela para restauração.
     * @param columnNames Vetor de nomes para os Headers da table
     * @param placa para consulta de serviços
     */
    public MultipleTable(CadastroServicos telanterior, String[] columnNames, String placa) {
        //Chamar construtor
        this();
        this.telaanterior = telanterior;
        this.setTitle("Seleção de serviços");
        what_close=1;
        CreateTable (columnNames, placa);
    }
    
    /**
     * 11/02/16 - Juliano Felipe 
     * Construtor para ser executado quando chamado do método de financas
     * @param telanterior Instância de tela para restauração.
     * @param columnNames Vetor de nomes para os Headers da table
     * @param situacao para consulta no banco de dados (pago ou não pago)
     */
    public MultipleTable(CadastroFinancas telanterior, String[] columnNames, String situacao) {
        //Chamar construtor
        this();
        this.anteriorFinancas = telanterior;
        this.setTitle("Seleção de finanças");
        what_close = 2;
        CreateTable (columnNames, situacao);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        SelectButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Seleção de múltiplas entradas");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            })
            {public boolean isCellEditable(int row, int column){return false;}}
        );
        jScrollPane1.setViewportView(jTable);
        jTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        SelectButton.setText("Selecionar");
        SelectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancelar");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SelectButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CancelButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 751, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SelectButton)
                    .addComponent(CancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   /**
     * 11/02/16 - Juliano Felipe 
     * Preenche a matriz de dados conforme consulta no banco de dados.
     * @param situacao sobre a financa a consultar no banco de dados
     * @return data "Matriz" (ArrayList em que cada posição é uma ArrayList) com os dados da consulta.
     */ 
    private ArrayList<ArrayList<Object>> getDataFinancas (String situacao){
        ArrayList<ArrayList<Object>> data = new ArrayList<>();
        
        String sit;  //Pago = true/1; Não pago = false/0
        if (situacao.equals("Não pago")) sit="0";
        else sit="1";

        Connection Mul = ConexaoBanco.Multiple();
        try {
            String sql2 = "SELECT rowid, * FROM financa WHERE sit=?";
            PreparedStatement pst = Mul.prepareStatement(sql2);
            pst.setString(1, sit);
            ResultSet rs = pst.executeQuery();

            while (rs.next())
            {//i=linha e j=coluna
                ArrayList<Object> row = new ArrayList();           
                String tmp; //String temporária para selecionar os tipos e transformá-los em algo legível (para o cliente).
                
                row.add(rs.getInt("rowid"));                  
                
                if(rs.getBoolean("tipo")) tmp = "Receita";
                else tmp = "Despesa";
                row.add(tmp);               
                
                row.add(rs.getString("data"));       
                row.add(rs.getDouble("valor"));              
                
                if(rs.getBoolean("sit")) tmp = "Quitado";
                else tmp = "Pendente";
                row.add(tmp);                          
                
                row.add(rs.getString("obs"));                 
                
                data.add(row);
                num_rs++;
            }
            rs.close();
            pst.close();
            Mul.close();
            
            return data;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro. Código: 04-07-06.", title, JOptionPane.ERROR_MESSAGE);
            //System.err.println(Arrays.toString(e.getStackTrace()));
            System.err.println("04-07-06: " + e.getClass().getName() + ": " + e.getMessage());
        }
        return null; //Erro
    }
    
    /**
     * 07/02/16 - Juliano Felipe 
     * Seleciona o nome completo do cliente no banco de dados, table "clientes"
     * @param rowid Id da coluna referente ao cliente
     * @param Mul Connection com o banco de dados.
     * @return fullname Nome completo do cliente.
     */ 
    private String getName (int rowid, Connection Mul){
        String fullname=""; //Inicializa a variável nome
        try {
            String sql2 = "SELECT rowid, * FROM cliente WHERE rowid="+rowid;
            PreparedStatement psta = Mul.prepareStatement(sql2);
            ResultSet ra = psta.executeQuery();

            if (ra.next()){//i=linha e j=coluna
                fullname = ra.getString("nome");
                fullname += " "; //Adiciona um espaço entre o primeiro nome e o resto
                fullname += ra.getString("lname");                   
            }
            ra.close();
            psta.close();
            
            return fullname;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro. Código: 04-07-02.", title, JOptionPane.ERROR_MESSAGE);
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
        }
        return null; //Erro
    }
    
    /**
     * 07/02/16 - Juliano Felipe 
     * Preenche a matriz de dados conforme consulta no banco de dados.
     * @param placa Placa associada ao serviço.
     * @return data "Matriz" (ArrayList em que cada posição é uma ArrayList) com os dados da consulta.
     */ 
    private ArrayList<ArrayList<Object>> getData (String placa){
        ArrayList<ArrayList<Object>> data = new ArrayList<>();
        
        int id;
        String fullname;

        Connection Mul = ConexaoBanco.Multiple();
        try {
            String sql2 = "SELECT rowid, * FROM servico WHERE Placa=?";
            PreparedStatement pst = Mul.prepareStatement(sql2);
            pst.setString(1, placa);
            ResultSet rs = pst.executeQuery();

            while (rs.next())
            {//i=linha e j=coluna
                ArrayList<Object> row = new ArrayList();
                
                id = rs.getInt("Idcliente");
                fullname = getName(id,Mul);              
                
                row.add(rs.getInt("rowid"));                  
                row.add(rs.getString("Placa"));               
                row.add(rs.getString("Quilometragem"));       
                row.add(rs.getString("Modelo"));
                
                String tmp;
                if(rs.getBoolean("Situacao")) tmp = "Concluído";
                else tmp = "Inconcluído";
                row.add(tmp);
                
                row.add(fullname);                          
                row.add(rs.getInt("Idcliente"));              
                row.add(rs.getString("Obs"));                 
                
                data.add(row);
                num_rs++;
            }
            //jList.setModel(model);

            rs.close();
            pst.close();
            Mul.close();
            
            return data;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro. Código: 04-07-01.", title, JOptionPane.ERROR_MESSAGE);
            //System.err.println(Arrays.toString(e.getStackTrace()));
            System.err.println("04-07-01: " + e.getClass().getName() + ": " + e.getMessage());
        }
        return null; //Erro
    }
    
    /**
     * 07/02/16 - Juliano Felipe 
     * Altera a jtable conforme necessidade (número de colunas, etc)
     * @param columnNames Vetor de nomes para os Headers da table
     * @param placa para consulta de serviços
     */
    private void CreateTable (String[] columnNames, String placa){
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        
        ArrayList<ArrayList<Object>> data = new ArrayList();
        
        if (what_close==1){ //Mais uma entrada para "what_close" e faz-se um switch
            data = getData (placa);   
        } else if (what_close==2){ //Re-aproveitamento de funçao
            data = getDataFinancas (placa);//Se "what_close" é 2, deve-se consultar finanças
        }
         
        if (num_rs<1){ //Se só for um resultado, seleciona-se a única row?
            JOptionPane.showMessageDialog(this, "Erro. Código: 04-07-07.\nNenhum resultado encontrado. Tente alterar os dados de consulta.", title, JOptionPane.ERROR_MESSAGE);
            this.dispose();
            Closing ("07");
            return;
        }
        
        int i = data.size();
        int j = columnNames.length; //Gambiarra para não pegar o size do "ArrayList interno"
        int t,n,k;
        length_row = j;
       
        for (t=0; t<j; t++){
            model.addColumn(columnNames[t]);
        }
        
        Object[] list = new Object [j];
        for (n=0; n<i; n++){
            ArrayList<Object> aux = new ArrayList();
            aux = data.get(n);
            for (k=0; k<j; k++){
                list[k] = aux.get(k);
            } 
            model.addRow(list);
        }
        
        jTable.setModel(model);
        //jTable.setEnabled(false);  //Não funciona para desabilitar edição
        //jTable.removeColumn(jTable.getColumnModel().getColumn(length_row-1)); //Não mostrar a data real
        if (what_close==1){
            jTable.getColumnModel().getColumn(0).setMaxWidth(40); //id - max
            jTable.getColumnModel().getColumn(0).setMinWidth(40); //id - min
            jTable.getColumnModel().getColumn(1).setMaxWidth(65); //placa
            jTable.getColumnModel().getColumn(1).setMinWidth(65); //placa
            jTable.getColumnModel().getColumn(2).setMaxWidth(85); //km
            jTable.getColumnModel().getColumn(2).setMinWidth(85); //km
            jTable.getColumnModel().getColumn(3).setMaxWidth(300); //Modelo
            jTable.getColumnModel().getColumn(3).setMinWidth(200); //Modelo - diferentes para poder "expandir"
            jTable.getColumnModel().getColumn(4).setMaxWidth(75); //sit
            jTable.getColumnModel().getColumn(4).setMinWidth(75); //situação
            jTable.getColumnModel().getColumn(5).setMinWidth(150); //nome - Sem max. para poder "expandir"
            jTable.getColumnModel().getColumn(6).setMaxWidth(40); //id cliente
            jTable.getColumnModel().getColumn(6).setMinWidth(40); //idc
        } else if (what_close==2){
            jTable.getColumnModel().getColumn(0).setMaxWidth(40); //id
            jTable.getColumnModel().getColumn(0).setMinWidth(40); //id
            jTable.getColumnModel().getColumn(1).setMaxWidth(65); //tipo
            jTable.getColumnModel().getColumn(1).setMinWidth(65); //tipo
            jTable.getColumnModel().getColumn(2).setMaxWidth(195); //data
            jTable.getColumnModel().getColumn(2).setMinWidth(195); //data
            jTable.getColumnModel().getColumn(3).setMaxWidth(100); //valor
            jTable.getColumnModel().getColumn(3).setMinWidth(100); //valor
            jTable.getColumnModel().getColumn(4).setMaxWidth(65); //situação
            jTable.getColumnModel().getColumn(4).setMinWidth(65); //situação
        }
        jTable.setAutoResizeMode(jTable.AUTO_RESIZE_LAST_COLUMN); //obs   
    }
    
    /**
     * 10/02/16 - Juliano Felipe 
     * Função para tornar String selecionada acessível (somente se chamado pelo frame "cadastro Servicos"
     * @return nomeCliente String selecionada na lista
     */
    public String getNomeCliente (){
        if (flag)
            if (what_close==1){
                return nomeCliente;
            } else {
                return null;
            }
        else
            return null;
    }
    
    /**
     * 10/02/16 - Juliano Felipe 
     * Função para tornar id acessível
     * @return id Id associado à string selecionada na lista
     */
    public int getId (){
        if (flag)
            return SelectedId;
        else
            return -1;
    }
    
    /**
     * 11/02/16 - Juliano Felipe 
     * Função para tornar a linha acessível sem precisar consultar do banco de dados novamente
     * @return rows - Dados da linha selecionada, vindos direto do banco, sem alterações
     */
    public Object[] getRow (){
        if (flag)
           return rows;
        else
            return null;
    }
    
    private void SelectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectButtonActionPerformed
        int row = jTable.getSelectedRow(); 
        DefaultTableModel model = (DefaultTableModel) jTable.getModel();
        
        Object[] rowData= new Object [length_row];
        for (int i=0; i<length_row; i++){ //For para copiar o vetor selecionado.
            rowData[i] = model.getValueAt(row, i);
        }
        
        SelectedId = Integer.parseInt(rowData[0].toString());
        
        //If "chamado por servico", setar "nomeCliente"
        if (what_close==1){
            nomeCliente = rowData[5].toString();
        } 
        
        parafechar=this; //Para salvar a instância desta tela
        this.setVisible(false); //Apenas esconde a tela para acessar as variáveis nas outras telas
        Closing ("03");
        
        rows=rowData;
        
        flag=true;
    }//GEN-LAST:event_SelectButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        this.dispose();
        Closing ("04");
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        this.dispose();
        Closing ("05");
    }//GEN-LAST:event_formWindowClosed

    /**
     * 11/02/16 - Juliano Felipe 
     * Método para fechar esta janela e retornar para a anterior, de acordo
     * com qual janela a chamou.
     * @param lastDoubleCode Ultimo parte de dois dígitos para código
     * de erros. Estes últimos dois dígitos indicam de onde foi chamado o método.
     */
    private void Closing (String lastDoubleCode){
        switch (what_close){
            case 1:
                telaanterior.setEnabled(true);
                telaanterior.requestFocus(); //Traz o foco para tela anterior
                break;
            case 2:
                anteriorFinancas.setEnabled(true);
                anteriorFinancas.requestFocus(); //Traz o foco para tela anterior
                break;
            default:
                JOptionPane.showMessageDialog(this, "Erro ao fechar e retornar para a janela anterior./nCódigo: 04-06-" + lastDoubleCode + ".", title, JOptionPane.ERROR_MESSAGE);
                //Erro 04-07-03   -   Dispose no botão Select
                //Erro 04-07-04   -   Dispose no botão Cancel
                //Erro 04-07-05   -   Dispose no "formWindowClosed"
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MultipleTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MultipleTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MultipleTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MultipleTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultipleTable().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton SelectButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable;
    // End of variables declaration//GEN-END:variables
}
